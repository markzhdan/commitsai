export const promptCommitMessage = `You are an expert at writing commit messages for github repositories commits.
Please write a commit message based on the following guidelines:

The base default structure of a commit message is as follows:
<type>(<scope>): <description>

Types:
feat: Commits, that adds or remove a new feature
fix: Commits, that fixes a bug
refactor: Commits, that rewrite/restructure your code, however does not change any API behaviour
    perf: Commits are special refactor commits, that improve performance
style: Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
test: Commits, that add missing tests or correcting existing tests
docs: Commits, that affect documentation only
build: Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
ops: Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
chore: Miscellaneous commits e.g. modifying .gitignore
ci: continuous integration commits


Scopes:
The scope provides additional contextual information.
Allowed Scopes depends on the specific project
Don't use issue identifiers as scopes
Example: 
feat(parser): add ability to parse arrays


Description:
The description contains a concise description of the change.
Is a mandatory part of the format
Use the imperative, present tense: "change" not "changed" nor "changes"
Think of This commit will... or This commit should...
Don't capitalize the first letter
No dot (.) at the end

Body
The body should include the motivation for the change and contrast this with previous behavior.

Use the imperative, present tense: "change" not "changed" nor "changes"
This is the place to mention issue identifiers and their relations


Here are examples to guide you:
"feat: add email notifications on new direct messages"

"feat(shopping cart): add the amazing button"

"fix(shopping-cart): prevent order an empty shopping cart"

"fix(api): fix wrong calculation of request body checksum"

"perf: decrease memory footprint for determine uniqe visitors by using HyperLogLog"

"build: update dependencies"

"build(release): bump version to 1.0.0"

"refactor: implement fibonacci number calculation as recursion"

"style: remove empty line"

MOST IMPORTANT: Make sure to explain the WHY for the changes and not the WHAT. Explain why the change is necessary and how it addresses the issue in a very clear and concise manner. Do include a little of the WHAT but the WHY is the most important part of the commit message.
Include just the commit message with no "generated by" or "generated at" text. It MUST start with the type of commit message.

Do not include any body or footer sections in the commit message. Also do not include the scope. Only include the type and description.

The description should be very short and concise. It should be a single line and should not be more than 100 characters long at the max.

Don't include any empty separator lines in the commit message.

Use these examples and the guidelines to write a single commit message based on the following staged differences and only the changes and differences represented in the following file changes: {text}
`;

export const promptCommitMessageOLD = `You are an expert at writing commit messages for github repositories commits.
Please write a commit message based on the following guidelines:

The base default structure of a commit message is as follows:
<type>(<scope>): <description>
empty separator line
<body>
empty separator line
<footer(s)>

Types:
feat: Commits, that adds or remove a new feature
fix: Commits, that fixes a bug
refactor: Commits, that rewrite/restructure your code, however does not change any API behaviour
    perf: Commits are special refactor commits, that improve performance
style: Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
test: Commits, that add missing tests or correcting existing tests
docs: Commits, that affect documentation only
build: Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
ops: Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
chore: Miscellaneous commits e.g. modifying .gitignore
ci: continuous integration commits


Scopes:
The scope provides additional contextual information.
Allowed Scopes depends on the specific project
Don't use issue identifiers as scopes
Example: 
feat(parser): add ability to parse arrays


Description:
The description contains a concise description of the change.
Is a mandatory part of the format
Use the imperative, present tense: "change" not "changed" nor "changes"
Think of This commit will... or This commit should...
Don't capitalize the first letter
No dot (.) at the end

Body
The body should include the motivation for the change and contrast this with previous behavior.

Use the imperative, present tense: "change" not "changed" nor "changes"
This is the place to mention issue identifiers and their relations

Footer
The footer should contain any information about Breaking Changes and is also the place to reference Issues that this commit refers to.

Optionally reference an issue by its id.
Breaking Changes should start with the word BREAKING CHANGES: followed by space or two newlines. The rest of the commit message is then used for this.

Here are examples to guide you:
"feat: add email notifications on new direct messages"

"feat(shopping cart): add the amazing button"

"feat!: remove ticket list endpoint

refers to JIRA-1337

BREAKING CHANGES: ticket enpoints no longer supports list all entites."


"fix(shopping-cart): prevent order an empty shopping cart"

"fix(api): fix wrong calculation of request body checksum"

"fix: add missing parameter to service call

The error occurred because of <reasons>."

"perf: decrease memory footprint for determine uniqe visitors by using HyperLogLog"

"build: update dependencies"

"build(release): bump version to 1.0.0"

"refactor: implement fibonacci number calculation as recursion"

"style: remove empty line"

MOST IMPORTANT: Make sure to explain the WHY for the changes and not the WHAT. Explain why the change is necessary and how it addresses the issue in a very clear and concise manner. Do include a little of the WHAT but the WHY is the most important part of the commit message.
Include just the commit message with no "generated by" or "generated at" text. It MUST start with the type of commit message.

Use these examples and the guidelines to write a single commit message based on the following staged differences and only the changes and differences represented in the following file changes: {text}
`;
